[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[device "pump"]
vendor = openaps.vendors.medtronic
extra = pump.ini

[device "cgm"]
vendor = openaps.vendors.dexcom
extra = cgm.ini

[report "raw-pump/bg-targets-raw.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/bg-targets.json"]
device = units
to = mg/dL
use = bg_targets
input = raw-pump/bg-targets-raw.json
reporter = JSON

[report "raw-pump/insulin-sensitivities-raw.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/insulin-sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = raw-pump/insulin-sensitivities-raw.json
reporter = JSON

[report "raw-pump/clock-raw.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/clock.json"]
date = None
use = read_clock
adjust = missing
reporter = JSON
device = pump
input = raw-pump/clock-raw.json
astimezone = False

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "oref0-predict/oref0.json"]
use = shell
oref0-iob = oref0-monitor/iob.json
temp-basal = monitor/temp-basal-status.json
reporter = text
json_default = True
oref0-profile = oref0-monitor/profile.json
device = determine-basal
remainder = 
glucose = monitor/glucose.json

[report "raw-pump/pump-history-raw.json"]
hours = 8.0
device = pump
use = iter_pump_hours
reporter = JSON

[report "monitor/pump-history.json"]
date = timestamp dateString start_at end_at created_at
use = rezone
adjust = missing
reporter = JSON
device = tz
input = raw-pump/pump-history-raw.json
astimezone = False

[report "model.json"]
device = pump
use = model
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "oref0-enacted/enacted-temp-basal.json"]
device = pump
input = oref0-predict/oref0.json
use = set_temp_basal
reporter = JSON

[report "settings/settings.json"]
device = pump
remainder = copy-fresher raw-pump/settings.json
use = read_settings
json_default = True
reporter = JSON

[report "raw-pump/settings.json"]
device = pump
use = read_settings
reporter = JSON

[report "settings/selected-basal-profile.json"]
device = oref0
remainder = copy-fresher raw-pump/selected-basal-profile.json
use = shell
json_default = True
reporter = JSON

[report "raw-pump/selected-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "raw-pump/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "raw-pump/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "raw-pump/status.json"]
device = pump
use = read_status
reporter = JSON

[report "raw-pump/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "raw-cgm/glucose-raw.json"]
use = oref0_glucose
no_raw = True
reporter = JSON
hours = 2.0
threshold = 100
device = cgm

[report "monitor/glucose.json"]
use = iter_glucose
reporter = JSON
astimezone = False
date = dateString display_time
adjust = missing
input = raw-cgm/glucose-raw.json
device = cgm
timezone = 
count = 5

[alias]
monitor-cgm = report invoke raw-cgm/glucose-raw.json monitor/glucose.json monitor/glucose-zoned.json
get-profile = report invoke settings/settings.json settings/bg_targets_raw.json settings/bg_targets.json settings/insulin_sensitivities_raw.json settings/insulin_sensitivities.json settings/basal_profile.json settings/profile.json
monitor-pump = report invoke monitor/clock.json monitor/temp_basal.json monitor/pumphistory.json monitor/iob.json
loop = ! bash -c "( openaps preflight && openaps gather && openaps enact) || echo LOOP FAILED."
retry-loop = ! bash -c "openaps preflight && until( ! mm-stick warmup || openaps loop); do sleep 5; done"
gather = ! bash -c "rm -f monitor/*; openaps get-profile && openaps monitor-cgm && openaps monitor-pump && openaps report invoke monitor/iob.json"
preflight = ! bash -c "(echo PREFLIGHT ) && openaps warmup 2>&1 >/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || openaps fail-warmup"
enact = ! bash -c "rm enact/suggested.json; openaps report invoke enact/suggested.json && cat enact/suggested.json && grep -q duration enact/suggested.json && (openaps report invoke enact/enacted.json && cat enact/enacted.json ) || echo No action required"
rm-warmup = ! bash -c "rm -f model.json monitor/clock.json > /dev/null"
warmup = report invoke model.json raw-pump/clock-raw.json monitor/clock.json
fail-warmup = ! bash -c "echo PREFLIGHT FAIL; exit 1"
monitor-pump-history = report invoke raw-pump/pump-history-raw.json monitor/pump-history.json
get-basal-status = report invoke monitor/temp-basal-status.json
get-pump-details = report invoke monitor/reservoir.json monitor/status.json monitor/battery.json
get-settings = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json raw-pump/settings.json settings/selected-basal-profile.json settings/settings.json
gather-pump-data = ! bash -c "openaps get-basal-status; openaps get-pump-details; openaps monitor-pump-history;  openaps get-settings"
gather-clean-data = ! bash -c "openaps monitor-cgm && openaps gather-pump-data"
do-oref0 = report invoke oref0-monitor/profile.json oref0-monitor/iob.json oref0-predict/oref0.json
enact-oref0 = report invoke oref0-enacted/enacted-temp-basal.json
do-everything = ! bash -c "(openaps preflight && openaps gather-clean-data && openaps do-oref0 && openaps enact-oref0);  openaps report-nightscout"
ping = ! bash -c "echo PONG! $*" --
pong = ! echo PONG
hello = ! echo hello
okbar = ! bash -c "echo $1" --
report-nightscout = report invoke nightscout/preflight.json nightscout/recent-treatments.json nightscout/uploaded.json nightscout/recent-missing-entries.json nightscout/uploaded-entries.json nightscout/openaps-status.json nightscout/uploaded-recent-devicestatus.json

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[device "calculate-iob"]
vendor = openaps.vendors.process
extra = calculate-iob.ini

[device "determine-basal"]
vendor = openaps.vendors.process
extra = determine-basal.ini

[report "settings/bg_targets_raw.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/insulin_sensitivities_raw.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/basal_profile.json"]
device = pump
use = read_basal_profile_std
reporter = JSON

[report "settings/profile.json"]
use = shell
bg_targets = settings/bg_targets_raw.json
preferences = preferences.json
settings = settings/settings.json
basal_profile = settings/basal_profile.json
reporter = text
json_default = True
device = get-profile
remainder = 
insulin_sensitivities = settings/insulin_sensitivities_raw.json

[device "units"]
vendor = openaps.vendors.units
extra = units.ini

[report "settings/bg_targets.json"]
device = units
to = mg/dL
use = bg_targets
input = settings/bg_targets_raw.json
reporter = JSON

[report "settings/insulin_sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = settings/insulin_sensitivities_raw.json
reporter = JSON

[report "monitor/pumphistory.json"]
device = pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[report "monitor/iob.json"]
profile = settings/profile.json
use = shell
clock = monitor/clock.json
reporter = JSON
json_default = True
pumphistory = monitor/pumphistory.json
device = calculate-iob
remainder = 

[report "monitor/temp_basal.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "enact/suggested.json"]
profile = settings/profile.json
use = shell
temp_basal = monitor/temp_basal.json
reporter = text
json_default = True
device = determine-basal
remainder = 
iob = monitor/iob.json
glucose = monitor/glucose.json

[report "enact/enacted.json"]
device = pump
input = enact/suggested.json
use = set_temp_basal
reporter = JSON

[device "ns"]
vendor = openaps.vendors.process
extra = ns.ini

[report "nightscout/recent-treatments.json"]
oper = format-recent-history-treatments
use = shell
reporter = JSON
device = ns
remainder = monitor/pump-history.json model.json
json_default = True

[report "nightscout/uploaded.json"]
oper = upload-non-empty-treatments
use = shell
reporter = JSON
device = ns
remainder = nightscout/recent-treatments.json
json_default = True

[report "nightscout/recent-missing-entries.json"]
oper = format-recent-type
use = shell
reporter = JSON
device = ns
remainder = tz entries monitor/glucose-zoned.json
json_default = True

[report "nightscout/uploaded-entries.json"]
oper = upload-non-empty-type
use = shell
reporter = JSON
device = ns
remainder = entries.json nightscout/recent-missing-entries.json
json_default = True

[report "nightscout/preflight.json"]
oper = preflight
use = shell
reporter = JSON
device = ns
remainder = 
json_default = True

[device "detect-sensitivity"]
vendor = openaps.vendors.process
extra = detect-sensitivity.ini

[report "oref0-monitor/profile.json"]
insulin-sensitivities = settings/insulin-sensitivities.json
use = shell
settings = settings/settings.json
reporter = text
json_default = True
device = get-profile
bg-targets = settings/bg-targets.json
basal-profile = settings/selected-basal-profile.json
max-iob = max-iob.json
remainder = 

[report "oref0-monitor/iob.json"]
use = shell
clock = monitor/clock.json
reporter = text
json_default = True
pump-history = monitor/pump-history.json
oref0-profile = oref0-monitor/profile.json
device = calculate-iob
remainder = 

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = 

[report "monitor/glucose-zoned.json"]
use = rezone
reporter = JSON
astimezone = False
date = system_time display_time
adjust = missing
input = monitor/glucose.json
device = tz
timezone = 

[device "ns-status"]
vendor = openaps.vendors.process
extra = ns-status.ini

[report "nightscout/openaps-status.json"]
device = ns-status
remainder = monitor/clock.json oref0-monitor/iob.json oref0-predict/oref0.json oref0-enacted/enacted-temp-basal.json monitor/battery.json monitor/reservoir.json monitor/status.json
use = shell
json_default = True
reporter = JSON

[report "nightscout/uploaded-recent-devicestatus.json"]
oper = upload
use = shell
reporter = JSON
json_default = True
device = ns
remainder = devicestatus.json nightscout/openaps-status.json added ns://JSON/shell/nightscout/uploaded-recent-devicestatus.json

